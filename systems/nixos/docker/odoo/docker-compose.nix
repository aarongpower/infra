# Auto-generated using compose2nix v0.2.3-pre.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };
  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."odoo-db" = {
    image = "postgres:15";
    environment = {
      "PGDATA" = "/var/lib/postgresql/data/pgdata";
      "POSTGRES_DB" = "postgres";
      "POSTGRES_USER" = "odoo";
    };
    volumes = [
      "odoo_db-data:/var/lib/postgresql/data/pgdata:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=db"
      "--network=odoo_default"
    ];
  };
  systemd.services."podman-odoo-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "podman-network-odoo_default.service"
      "podman-volume-odoo_db-data.service"
    ];
    requires = [
      "podman-network-odoo_default.service"
      "podman-volume-odoo_db-data.service"
    ];
    partOf = [
      "podman-compose-odoo-root.target"
    ];
    wantedBy = [
      "podman-compose-odoo-root.target"
    ];
  };
  virtualisation.oci-containers.containers."odoo-web" = {
    image = "odoo:17.0";
    volumes = [
      "odoo_odoo-addons:/mnt/extra-addons:rw"
      "odoo_odoo-config:/etc/odoo:rw"
      "odoo_odoo-data:/var/lib/odoo:rw"
    ];
    ports = [
      "8069:8069/tcp"
    ];
    dependsOn = [
      "odoo-db"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=web"
      "--network=odoo_default"
    ];
  };
  systemd.services."podman-odoo-web" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "podman-network-odoo_default.service"
      "podman-volume-odoo_odoo-addons.service"
      "podman-volume-odoo_odoo-config.service"
      "podman-volume-odoo_odoo-data.service"
    ];
    requires = [
      "podman-network-odoo_default.service"
      "podman-volume-odoo_odoo-addons.service"
      "podman-volume-odoo_odoo-config.service"
      "podman-volume-odoo_odoo-data.service"
    ];
    partOf = [
      "podman-compose-odoo-root.target"
    ];
    wantedBy = [
      "podman-compose-odoo-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-odoo_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f odoo_default";
    };
    script = ''
      podman network inspect odoo_default || podman network create odoo_default
    '';
    partOf = [ "podman-compose-odoo-root.target" ];
    wantedBy = [ "podman-compose-odoo-root.target" ];
  };

  # Volumes
  systemd.services."podman-volume-odoo_db-data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect odoo_db-data || podman volume create odoo_db-data
    '';
    partOf = [ "podman-compose-odoo-root.target" ];
    wantedBy = [ "podman-compose-odoo-root.target" ];
  };
  systemd.services."podman-volume-odoo_odoo-addons" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect odoo_odoo-addons || podman volume create odoo_odoo-addons
    '';
    partOf = [ "podman-compose-odoo-root.target" ];
    wantedBy = [ "podman-compose-odoo-root.target" ];
  };
  systemd.services."podman-volume-odoo_odoo-config" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect odoo_odoo-config || podman volume create odoo_odoo-config
    '';
    partOf = [ "podman-compose-odoo-root.target" ];
    wantedBy = [ "podman-compose-odoo-root.target" ];
  };
  systemd.services."podman-volume-odoo_odoo-data" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      podman volume inspect odoo_odoo-data || podman volume create odoo_odoo-data
    '';
    partOf = [ "podman-compose-odoo-root.target" ];
    wantedBy = [ "podman-compose-odoo-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-odoo-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
